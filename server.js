var express = require('express');
var morgan = require('morgan');
var path = require('path');

var app = express();
app.use(morgan('combined'));

var contentPages = {
 	'intro' :{
	    title: 'ORACLE MIDDLEWARE BLOG',
	    heading:'Dealing with Stuck Threads',
	    date: 'June 10, 2014',
	    body: `<p>
		Most WebLogic administrators have to deal with the Stuck Threads problem from time to time. Stuck threads are JVM threads that have been running for more than a certain configurable time (default 600 seconds).
	    </p>
	    </p>
	    These threads cannot be killed or cleared, but there are still things that an admin can do to alleviate the impact of such undesirable behavior. And the final solution should be finding the root cause of the stuck threads in order to avoid them completely, rather than react when this condition appears. But analysis can be tedious and can take a long time, especially when waiting for an application provider to fix their code.
	    </p>
	    </p>
	    In the meantime, the admin can and should automate the tasks of collecting diagnostic data and recovering from a complete server hang eventually caused by an increasing number of Stuck Threads.
	    >/p>
	    <p>
	    First thing to check when there are Stuck Threads, is to generate a Thread Dump and analyze the threads that are being stuck. It could be that the stuck threads are generated by a problem in the code, by the unavailability of an external system, or it can even be an expected behavior, in the case of some long lasting operations in the application.
	    </p>`,
	    footer: 'main'
	    },
	'main': {
		title: 'ORACLE MIDDLEWARE BLOG',
		heading:'Observing the Stuck Threads',
		date: 'June 11, 2014',
		body: `<p>
		When a WebLogic server instance's thread pool has stuck threads, the instance will be marked as running with statu. Of course, it is more convenient to have a watch that triggers when there are stuck threads detected. In latest FMW installations, there is a diagnostic module created by default which contains a Server Log type watch, trigerring when the Stuck Threads message is detected in the servers logs.  
		</p>`,
		footer: 'conclusion'
		},
	'conclusion':{
		title: 'ORACLE MIDDLEWARE BLOG',
		heading:'Generating a Thread Dump',
		date: 'June 12, 2014',
		body: `<p>
		Now everytime there are Stuck Threads detected, there are also automatic Diagnostic Images generated in the configured directory. This includes information on the state of the server at a certain time, and a JVM Thread Dump that can be used in further analysis.
		</p>`,
		footer: 'email the review to lenin.basheer@gmail.com'
	}
};

function createMasterTemplate(data){

var  title = data.title;
var date=data.date;
var heading = data.heading;
var body = data.body;
var footer=data.footer;

var contentTemplate=`
<html>
<head>
    <link href="/ui/style.css" rel="stylesheet"/>
	<title> Personal Page </title>

</head>
<body>

	<div class="center">
		<img src="/ui/madi.png" class="icon-small"/>
	</div>

	<div>
	 <a href="/">Home</a>
	</div>
	<br>
	<div>
		<h3> ${title} </h3>
		<h4> ${date} </h4>
		<li class="bullets">${heading}</li>
	</div>
	<div>
    	${body}
	</div>
	<div class="right">
     <a href="/${footer}">  Next </a>	
	</div>

</body>
</html>
`;
return contentTemplate;

}

app.get('/', function (req, res) {
  res.sendFile(path.join(__dirname, 'ui', 'index.html'));
});

app.get('/ui/style.css', function (req, res) {
  res.sendFile(path.join(__dirname, 'ui', 'style.css'));
});

app.get('/ui/madi.png', function (req, res) {
  res.sendFile(path.join(__dirname, 'ui', 'madi.png'));
});

var counter=0;
app.get('/counter', function(req, res){
    counter=counter+1;
    res.send("Counter Page");
     res.send(counter.toString());
});
app.get('/:requestName', function (req, res) {
    var requestName=req.params.requestName;
  res.send(createMasterTemplate(contentPages[requestName]));
});


var port = 8080; // Use 8080 for local development because you might already have apache running on 80
app.listen(8080, function () {
  console.log(`IMAD course app listening on port ${port}!`);
});
